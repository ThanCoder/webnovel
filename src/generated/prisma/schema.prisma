// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  // url      = "file:./dev.db"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @unique
  name       String
  email      String
  password   String
  profileUrl String

  type     String   @default("normal")
  date     DateTime @default(now())
  isBanned Boolean  @default(false)

  novels Novel[]
}

model Novel {
  id         Int      @id @default(autoincrement())
  userId     String
  title      String   @unique
  author     String   @default("Unknown")
  translator String   @default("Unknown")
  mc         String   @default("Unknown")
  desc       String
  coverUrl   String
  date       DateTime @default(now())

  isAnyoneCanUploaded Boolean @default(true)
  isPublished         Boolean @default(true)

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  novelContentFiles ContentFile[]
  Chapter           Chapter[]
}

model ContentFile {
  id       Int      @id @default(autoincrement())
  userId   Int
  novelId  Int
  title    String
  coverUrl String
  content  String
  desc     String
  type     String
  date     DateTime @default(now())

  isPublished Boolean @default(true)

  novel Novel @relation(fields: [novelId], references: [id], onDelete: Cascade)
}

model Chapter {
  id      Int    @id @default(autoincrement())
  userId  Int
  novelId Int
  title   String
  content String

  isPublished Boolean @default(true)

  novel Novel @relation(fields: [novelId], references: [id], onDelete: Cascade)
}
